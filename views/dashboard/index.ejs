<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="dashboard-body">
    <%- include('../navigationBar/navBar') %>
    <div class="main-content dashboard-page">
      <section class="dashboard-header">
        <div>
          <h1 class="dashboard-title">CampusWell Wellness Dashboard</h1>
          <p class="dashboard-subtitle">
            Monitor student wellbeing trends and engagement across events, mood logs, and social connections.
          </p>
        </div>
        <form id="dashboard-filter" class="dashboard-filter" method="get">
          <div class="filter-group">
            <label for="from">From</label>
            <input
              type="date"
              id="from"
              name="from"
              value="<%= dashboard.filters.from %>"
              max="<%= dashboard.filters.to %>"
            />
          </div>
          <div class="filter-group">
            <label for="to">To</label>
            <input
              type="date"
              id="to"
              name="to"
              value="<%= dashboard.filters.to %>"
              min="<%= dashboard.filters.from %>"
            />
          </div>
          <div class="filter-actions">
            <button type="submit" class="btn btn-primary">Apply</button>
            <button type="button" id="reset-filters" class="btn btn-secondary">Reset</button>
          </div>
        </form>
      </section>

      <section id="dashboard-error" class="dashboard-error hidden" role="alert"></section>

      <section class="dashboard-kpis" aria-label="Key performance indicators">
        <article class="kpi-card">
          <h2>Upcoming Events</h2>
          <p class="kpi-value" id="kpi-upcoming-events"><%= dashboard.kpis.upcomingEvents %></p>
          <p class="kpi-meta">Events scheduled after today.</p>
        </article>
        <article class="kpi-card">
          <h2>Mood Logs (Range)</h2>
          <p class="kpi-value" id="kpi-mood-logs"><%= dashboard.kpis.moodLogsTotalInRange %></p>
          <p class="kpi-meta">Entries captured between the selected dates.</p>
        </article>
        <article class="kpi-card">
          <h2>Connections</h2>
          <p class="kpi-value" id="kpi-connections"><%= dashboard.kpis.connectionsTotal %></p>
          <p class="kpi-meta">Total peer support connections created.</p>
        </article>
        <article class="kpi-card">
          <h2>Weekly Avg. Mood</h2>
          <div id="kpi-weekly-average" class="kpi-weekly">
            <% if (dashboard.kpis.weeklyAvgMood) { %>
              <ul>
                <% dashboard.kpis.weeklyAvgMood.forEach((week) => { %>
                  <li><span><%= week.week %></span><strong><%= week.avgScore.toFixed(2) %></strong></li>
                <% }) %>
              </ul>
            <% } else { %>
              <p class="kpi-meta">Mood score column is not available.</p>
            <% } %>
          </div>
        </article>
      </section>

      <section class="dashboard-flex">
        <div class="dashboard-card" aria-labelledby="chart-mood-trend-title">
          <div class="card-header">
            <h2 id="chart-mood-trend-title">Mood Trend (Daily)</h2>
            <p>Track daily log volume to spot wellbeing spikes.</p>
          </div>
          <canvas id="moodTrendChart" height="220" aria-describedby="chart-mood-trend-title"></canvas>
        </div>
        <div class="dashboard-card" aria-labelledby="chart-event-category-title">
          <div class="card-header">
            <h2 id="chart-event-category-title">Events by Category</h2>
            <p>Identify which programming resonates most with students.</p>
          </div>
          <canvas id="eventCategoryChart" height="220" aria-describedby="chart-event-category-title"></canvas>
          <ul class="top-categories" id="top-event-categories">
            <% dashboard.kpis.eventsByCategoryTop5.forEach((category) => { %>
              <li>
                <span><%= category.category || 'Uncategorized' %></span>
                <strong><%= category.count %></strong>
              </li>
            <% }) %>
          </ul>
        </div>
      </section>

      <section class="dashboard-tables">
        <div class="dashboard-card" aria-labelledby="upcoming-events-title">
          <div class="card-header">
            <h2 id="upcoming-events-title">Next 10 Events</h2>
            <p>Plan staffing and promotion for the biggest week ahead.</p>
          </div>
          <div class="table-wrapper">
            <table>
              <thead>
                <tr>
                  <th scope="col">Title</th>
                  <th scope="col">Category</th>
                  <th scope="col">Date</th>
                  <th scope="col">Time</th>
                  <th scope="col">Location</th>
                </tr>
              </thead>
              <tbody id="table-upcoming-events">
                <% if (dashboard.tables.upcomingEvents.length === 0) { %>
                  <tr>
                    <td colspan="5" class="empty-state">No upcoming events scheduled.</td>
                  </tr>
                <% } else { %>
                  <% dashboard.tables.upcomingEvents.forEach((event) => { %>
                    <tr>
                      <td><%= event.title %></td>
                      <td><%= event.category || 'Uncategorized' %></td>
                      <td><%= event.event_date ? new Date(event.event_date).toLocaleDateString() : '—' %></td>
                      <td><%= event.event_time || '—' %></td>
                      <td><%= event.location || '—' %></td>
                    </tr>
                  <% }) %>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>

        <div class="dashboard-card" aria-labelledby="recent-moods-title">
          <div class="card-header">
            <h2 id="recent-moods-title">Recent Mood Logs</h2>
            <p>Latest reflections from your student community.</p>
          </div>
          <div class="table-wrapper">
            <table>
              <thead>
                <tr>
                  <th scope="col">Student</th>
                  <th scope="col">Mood</th>
                  <th scope="col">Created</th>
                  <% if (dashboard.meta.hasMoodScore) { %>
                    <th scope="col">Score</th>
                  <% } %>
                </tr>
              </thead>
              <tbody id="table-recent-moods" data-has-score="<%= dashboard.meta.hasMoodScore %>">
                <% if (dashboard.tables.recentMoods.length === 0) { %>
                  <tr>
                    <td colspan="<%= dashboard.meta.hasMoodScore ? 4 : 3 %>" class="empty-state">No mood logs captured yet.</td>
                  </tr>
                <% } else { %>
                  <% dashboard.tables.recentMoods.forEach((log) => { %>
                    <tr>
                      <td><%= log.student_name || 'Anonymous' %></td>
                      <td><%= log.mood || log.mood_description || '—' %></td>
                      <td><%= log.created_at ? new Date(log.created_at).toLocaleString() : '—' %></td>
                      <% if (dashboard.meta.hasMoodScore) { %>
                        <td><%= typeof log.mood_score === 'number' ? log.mood_score.toFixed(2) : log.mood_score ?? '—' %></td>
                      <% } %>
                    </tr>
                  <% }) %>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>

        <div class="dashboard-card" aria-labelledby="recent-connections-title">
          <div class="card-header">
            <h2 id="recent-connections-title">Recent Connections</h2>
            <p>Follow up on new mentorship or peer support matches.</p>
          </div>
          <div class="table-wrapper">
            <table>
              <thead>
                <tr>
                  <th scope="col">Student A</th>
                  <th scope="col">Student B</th>
                  <th scope="col">Created</th>
                  <th scope="col">Status</th>
                </tr>
              </thead>
              <tbody id="table-recent-connections">
                <% if (dashboard.tables.recentConnections.length === 0) { %>
                  <tr>
                    <td colspan="4" class="empty-state">No new connections yet.</td>
                  </tr>
                <% } else { %>
                  <% dashboard.tables.recentConnections.forEach((connection) => { %>
                    <tr>
                      <td><%= connection.student_a || connection.initiator || '—' %></td>
                      <td><%= connection.student_b || connection.recipient || '—' %></td>
                      <td><%= connection.created_at ? new Date(connection.created_at).toLocaleString() : '—' %></td>
                      <td><%= connection.status || 'Pending' %></td>
                    </tr>
                  <% }) %>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </section>

      <section class="dashboard-meta">
        <h2>Insights &amp; Notes</h2>
        <ul id="dashboard-notes">
          <% dashboard.meta.notes.forEach((note) => { %>
            <li><%= note %></li>
          <% }) %>
        </ul>
        <p class="meta-footnote">
          Data refreshed for <strong><%= dashboard.filters.from %></strong> to <strong><%= dashboard.filters.to %></strong>.
        </p>
      </section>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.7/dist/chart.umd.min.js" integrity="sha384-+dR9f7D78D6yxCIum1bgL2bIB9UyynXDGIlHY2TyO2NWxRAPoKqkSyfJYbD+Wo0I" crossorigin="anonymous"></script>
    <script>
      const state = {
        dashboard: <%- JSON.stringify(dashboard) %>,
        charts: {
          moodTrend: null,
          eventCategory: null,
        },
      };

      const els = {
        form: document.getElementById('dashboard-filter'),
        reset: document.getElementById('reset-filters'),
        error: document.getElementById('dashboard-error'),
        upcomingEvents: document.getElementById('kpi-upcoming-events'),
        moodLogs: document.getElementById('kpi-mood-logs'),
        connections: document.getElementById('kpi-connections'),
        weeklyAverage: document.getElementById('kpi-weekly-average'),
        moodTrend: document.getElementById('moodTrendChart'),
        eventCategory: document.getElementById('eventCategoryChart'),
        topCategories: document.getElementById('top-event-categories'),
        tableUpcomingEvents: document.getElementById('table-upcoming-events'),
        tableRecentMoods: document.getElementById('table-recent-moods'),
        tableRecentConnections: document.getElementById('table-recent-connections'),
        dashboardNotes: document.getElementById('dashboard-notes'),
      };

      const formatNumber = (value) =>
        new Intl.NumberFormat(undefined, { maximumFractionDigits: 0 }).format(value ?? 0);

      const renderList = (container, items, template) => {
        container.innerHTML = '';
        if (!items || items.length === 0) {
          container.innerHTML = template.empty();
          return;
        }
        const fragment = document.createDocumentFragment();
        items.forEach((item) => fragment.appendChild(template.row(item)));
        container.appendChild(fragment);
      };

      const renderWeeklyAverage = (container, weeklyData) => {
        if (!weeklyData) {
          container.innerHTML = '<p class="kpi-meta">Mood score column is not available.</p>';
          return;
        }
        if (weeklyData.length === 0) {
          container.innerHTML = '<p class="kpi-meta">No mood scores recorded in this range.</p>';
          return;
        }
        container.innerHTML = '';
        const list = document.createElement('ul');
        weeklyData.forEach((week) => {
          const item = document.createElement('li');
          const span = document.createElement('span');
          span.textContent = week.week;
          const strong = document.createElement('strong');
          strong.textContent = Number(week.avgScore).toFixed(2);
          item.append(span, strong);
          list.appendChild(item);
        });
        container.appendChild(list);
      };

      const renderCharts = (data) => {
        const moodLabels = data.charts.moodTrendDaily.map((point) => point.day);
        const moodValues = data.charts.moodTrendDaily.map((point) => point.count);
        const eventLabels = data.charts.eventsByCategory.map((row) => row.category || 'Uncategorized');
        const eventValues = data.charts.eventsByCategory.map((row) => row.count);

        if (!state.charts.moodTrend) {
          state.charts.moodTrend = new Chart(els.moodTrend, {
            type: 'line',
            data: {
              labels: moodLabels,
              datasets: [
                {
                  label: 'Mood Logs',
                  data: moodValues,
                  fill: false,
                  borderColor: '#017d71',
                  backgroundColor: '#9bd3cb',
                  tension: 0.3,
                  pointRadius: 4,
                },
              ],
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  ticks: {
                    precision: 0,
                  },
                },
              },
            },
          });
        } else {
          state.charts.moodTrend.data.labels = moodLabels;
          state.charts.moodTrend.data.datasets[0].data = moodValues;
          state.charts.moodTrend.update();
        }

        if (!state.charts.eventCategory) {
          state.charts.eventCategory = new Chart(els.eventCategory, {
            type: 'bar',
            data: {
              labels: eventLabels,
              datasets: [
                {
                  label: 'Events',
                  data: eventValues,
                  backgroundColor: '#4a90e2',
                  borderRadius: 6,
                },
              ],
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  ticks: {
                    precision: 0,
                  },
                },
              },
            },
          });
        } else {
          state.charts.eventCategory.data.labels = eventLabels;
          state.charts.eventCategory.data.datasets[0].data = eventValues;
          state.charts.eventCategory.update();
        }

        els.topCategories.innerHTML = '';
        data.kpis.eventsByCategoryTop5.forEach((category) => {
          const item = document.createElement('li');
          const name = document.createElement('span');
          name.textContent = category.category || 'Uncategorized';
          const total = document.createElement('strong');
          total.textContent = formatNumber(category.count);
          item.append(name, total);
          els.topCategories.appendChild(item);
        });
      };

      const templates = {
        upcomingEvents: {
          empty: () => '<tr><td colspan="5" class="empty-state">No upcoming events scheduled.</td></tr>',
          row: (event) => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${event.title ?? '—'}</td>
              <td>${event.category ?? 'Uncategorized'}</td>
              <td>${event.event_date ? new Date(event.event_date).toLocaleDateString() : '—'}</td>
              <td>${event.event_time ?? '—'}</td>
              <td>${event.location ?? '—'}</td>
            `;
            return tr;
          },
        },
        recentMoods: {
          empty: () => `<tr><td colspan="${state.dashboard.meta.hasMoodScore ? 4 : 3}" class="empty-state">No mood logs captured yet.</td></tr>`,
          row: (log) => {
            const hasScore = state.dashboard.meta.hasMoodScore;
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${log.student_name ?? log.student ?? 'Anonymous'}</td>
              <td>${log.mood ?? log.mood_description ?? '—'}</td>
              <td>${log.created_at ? new Date(log.created_at).toLocaleString() : '—'}</td>
              ${hasScore ? `<td>${typeof log.mood_score === 'number' ? log.mood_score.toFixed(2) : log.mood_score ?? '—'}</td>` : ''}
            `;
            return tr;
          },
        },
        recentConnections: {
          empty: () => '<tr><td colspan="4" class="empty-state">No new connections yet.</td></tr>',
          row: (connection) => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${connection.student_a ?? connection.initiator ?? '—'}</td>
              <td>${connection.student_b ?? connection.recipient ?? '—'}</td>
              <td>${connection.created_at ? new Date(connection.created_at).toLocaleString() : '—'}</td>
              <td>${connection.status ?? 'Pending'}</td>
            `;
            return tr;
          },
        },
      };

      const updateDashboard = (data) => {
        state.dashboard = data;
        els.upcomingEvents.textContent = formatNumber(data.kpis.upcomingEvents);
        els.moodLogs.textContent = formatNumber(data.kpis.moodLogsTotalInRange);
        els.connections.textContent = formatNumber(data.kpis.connectionsTotal);
        renderWeeklyAverage(els.weeklyAverage, data.kpis.weeklyAvgMood);
        renderCharts(data);
        renderList(els.tableUpcomingEvents, data.tables.upcomingEvents, templates.upcomingEvents);
        state.dashboard.meta.hasMoodScore = data.meta.hasMoodScore;
        renderList(els.tableRecentMoods, data.tables.recentMoods, templates.recentMoods);
        renderList(els.tableRecentConnections, data.tables.recentConnections, templates.recentConnections);
        els.dashboardNotes.innerHTML = '';
        data.meta.notes.forEach((note) => {
          const li = document.createElement('li');
          li.textContent = note;
          els.dashboardNotes.appendChild(li);
        });
      };

      const showError = (message) => {
        els.error.textContent = message;
        els.error.classList.remove('hidden');
      };

      const clearError = () => {
        els.error.textContent = '';
        els.error.classList.add('hidden');
      };

      els.form.addEventListener('submit', async (event) => {
        event.preventDefault();
        clearError();
        const formData = new FormData(event.currentTarget);
        const params = new URLSearchParams(formData);
        try {
          const response = await fetch(`/dashboard/data?${params.toString()}`, {
            headers: { Accept: 'application/json' },
          });
          if (!response.ok) {
            const error = await response.json().catch(() => ({ error: 'Unknown error' }));
            throw new Error(error.details || error.error || 'Unable to refresh dashboard.');
          }
          const fresh = await response.json();
          updateDashboard(fresh);
        } catch (error) {
          console.error('Failed to refresh dashboard data:', error);
          showError(error.message || 'Unable to refresh dashboard.');
        }
      });

      els.reset.addEventListener('click', () => {
        clearError();
        els.form.reset();
        window.location.href = '/dashboard';
      });

      renderCharts(state.dashboard);
    </script>
  </body>
</html>
